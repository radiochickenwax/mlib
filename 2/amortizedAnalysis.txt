
Guidelines:
-----------
1. Each time an item is added to the array without requiring
   reallocation, count 1 unit of cost. This cost will cover the
   assignment which actually puts the item in the array. 

2. Each time an item is added and requires reallocation, count X + 1
   units of cost, where X is the number of items currently in the
   array. This cost will cover the X assignments which are necessary
   to copy the contents of the full array into a new (larger) array,
   and the additional assignment to put the item which did not fit
   originally. 

Analysis:
========
1. How many cost units are spent in the entire process of performing
   32 consecutive push operations on an empty array which starts out
   at capacity 8, assuming that the array will double in capacity each
   time a new item is added to an already full dynamic array? As N
   (ie. the number of pushes) grows large, under this strategy for
   resizing, what is the big-oh complexity for a push?  

By amortized analysis, the sum of costs are 56 with an avg cost of
1.75 shown in the following table.

The big-oh complexity is O(1)+.

|-------------+----------+---------+--------------+-----------|
| (N) push op | capacity | op cost | sum of costs |  avg cost |
|-------------+----------+---------+--------------+-----------|
|           1 |        8 |       1 |            1 |         1 |
|           2 |        8 |       1 |            2 |         1 |
|           3 |        8 |       1 |            3 |         1 |
|           4 |        8 |       1 |            4 |         1 |
|           5 |        8 |       1 |            5 |         1 |
|           6 |        8 |       1 |            6 |         1 |
|           7 |        8 |       1 |            7 |         1 |
|           8 |        8 |       1 |            8 |         1 |
|           9 |       16 |     8+1 |           17 | 1.8888889 |
|          10 |       16 |       1 |           18 |       1.8 |
|          11 |       16 |       1 |           19 | 1.7272727 |
|          12 |       16 |       1 |           20 | 1.6666667 |
|          13 |       16 |       1 |           21 | 1.6153846 |
|          14 |       16 |       1 |           22 | 1.5714286 |
|          15 |       16 |       1 |           23 | 1.5333333 |
|          16 |       16 |       1 |           24 |       1.5 |
|          17 |       32 |    16+1 |           41 | 2.4117647 |
|          18 |       32 |       1 |           42 | 2.3333333 |
|          19 |       32 |       1 |           43 | 2.2631579 |
|          20 |       32 |       1 |           44 |       2.2 |
|          21 |       32 |       1 |           45 | 2.1428571 |
|          22 |       32 |       1 |           46 | 2.0909091 |
|          23 |       32 |       1 |           47 | 2.0434783 |
|          24 |       32 |       1 |           48 |         2 |
|          25 |       32 |       1 |           49 |      1.96 |
|          26 |       32 |       1 |           50 | 1.9230769 |
|          27 |       32 |       1 |           51 | 1.8888889 |
|          28 |       32 |       1 |           52 | 1.8571429 |
|          29 |       32 |       1 |           53 | 1.8275862 |
|          30 |       32 |       1 |           54 |       1.8 |
|          31 |       32 |       1 |           55 | 1.7741935 |
|          32 |       32 |       1 |           56 |      1.75 |
#+TBLFM: $5=$4/$1



2. How many cost units are spent in the entire process of performing
   32 consecutive push operations on an empty array which starts out
   at capacity 8, assuming that the array will grow by a constant 2
   spaces each time a new item is added to an already full dynamic
   array? As N (ie. the number of pushes) grows large, under this
   strategy for resizing, what is the big-oh complexity for a push? 

For this scheme, the cost units spent are 260.  This is roughly a
big-oh complexity O(n).  One might also say it's O(n/x) depending on
precision where x is some number such as 4.  
|-------------+----------+---------+--------------+-----------+------+------|
| (N) push op | capacity | op cost | sum of costs |  avg cost |  n/4 |  n^2 |
|-------------+----------+---------+--------------+-----------+------+------|
|           1 |        8 |       1 |            1 |         1 | 0.25 |    1 |
|           2 |        8 |       1 |            2 |         1 |  0.5 |    4 |
|           3 |        8 |       1 |            3 |         1 | 0.75 |    9 |
|           4 |        8 |       1 |            4 |         1 |    1 |   16 |
|           5 |        8 |       1 |            5 |         1 | 1.25 |   25 |
|           6 |        8 |       1 |            6 |         1 |  1.5 |   36 |
|           7 |        8 |       1 |            7 |         1 | 1.75 |   49 |
|           8 |        8 |       1 |            8 |         1 |    2 |   64 |
|           9 |       10 |     8+1 |           17 | 1.8888889 | 2.25 |   81 |
|          10 |       10 |       1 |           18 |       1.8 |  2.5 |  100 |
|          11 |       12 |    10+1 |           29 | 2.6363636 | 2.75 |  121 |
|          12 |       12 |       1 |           30 |       2.5 |    3 |  144 |
|          13 |       14 |    12+1 |           43 | 3.3076923 | 3.25 |  169 |
|          14 |       14 |       1 |           44 | 3.1428571 |  3.5 |  196 |
|          15 |       16 |    14+1 |           59 | 3.9333333 | 3.75 |  225 |
|          16 |       16 |       1 |           60 |      3.75 |    4 |  256 |
|          17 |       18 |    16+1 |           77 | 4.5294118 | 4.25 |  289 |
|          18 |       18 |       1 |           78 | 4.3333333 |  4.5 |  324 |
|          19 |       20 |    18+1 |           97 | 5.1052632 | 4.75 |  361 |
|          20 |       20 |       1 |           98 |       4.9 |    5 |  400 |
|          21 |       22 |    20+1 |          119 | 5.6666667 | 5.25 |  441 |
|          22 |       22 |       1 |          120 | 5.4545455 |  5.5 |  484 |
|          23 |       24 |    22+1 |          143 | 6.2173913 | 5.75 |  529 |
|          24 |       24 |       1 |          144 |         6 |    6 |  576 |
|          25 |       26 |    24+1 |          169 |      6.76 | 6.25 |  625 |
|          26 |       26 |       1 |          170 | 6.5384615 |  6.5 |  676 |
|          27 |       28 |    26+1 |          197 | 7.2962963 | 6.75 |  729 |
|          28 |       28 |       1 |          198 | 7.0714286 |    7 |  784 |
|          29 |       30 |    28+1 |          227 | 7.8275862 | 7.25 |  841 |
|          30 |       30 |       1 |          228 |       7.6 |  7.5 |  900 |
|          31 |       32 |    30+1 |          259 | 8.3548387 | 7.75 |  961 |
|          32 |       32 |       1 |          260 |     8.125 |    8 | 1024 |


Side Note:
I found a contradictory explanation of this at
http://stackoverflow.com/questions/19146037/efficiency-of-growing-a-dynamic-array-by-a-fixed-constant-each-time 

Doubling the capacity:



    1 + 2 + 4 + 8 + 16 + 32 + ... + n

    = 1 + 2 + 4 + 8 + ... + 2log n

    = 2log n + 1 - 1

    = 2n - 1

    = Θ(n)

Increasing the capacity by a constant:


    (c + c) + (2c + c) + (3c + c) + ... + (n + c)

    = cn / c + (c + 2c + 3c + ... + nc / c)

    = n + c(1 + 2 + 3 + ... + n / c)

    = n + c*(n/c)*(n/c + 1)/2

    = n + n*(n/c + 1)/2

    = n + (n^2 / c) + n / 2

    = Θ(n^2)


3. Suppose that a dynamic array stack doubles its capacity when it is
   full, and shrinks (on Pop only) its capacity by half when the array
   is half full or less. Can you devise a sequence of N push() and
   pop() operations which will result in poor performance (O(N^2)
   total cost)? How might you adjust the array's shrinking policy to
   avoid this? (Hint: You may assume that the initial capacity of the
   array is N/2.) 

The clearest and most general explanation for this I could find was
from the Canvas discussion board, which went like the following:

=====================================================================
We perform n operations on a table T, where n is an exact power
of 2. The first n/2 operations  are insertions, which by our previous
analysis cost a total of  (n). At the end of this sequence of
insertions, num[T] = size[T] =  n/2. For the second n/2 operations, we
perform the following  sequence:

I, D, D, I, I, D, D, I, I,... ,

 where I stands for an insertion and D stands for a deletion. The
 first insertion causes an expansion of the table to size n. The two
 following deletions cause a contraction of the table back to size
 n/2. Two further insertions cause another expansion, and so
 forth. The cost of each expansion and contraction is O(n), and there
 are O(n) of them. Thus, the total cost of the n operations is O(n^2),
 and the amortized cost of  an operation is O(n).
======================================================================

No matter how I look at the problem, the O(n^2) costs only occur for
alternating sequences.  One way around this is to avoid alternating
sequences somehow (using a stack perhaps to record the last two
transaction types (push, pop) to predict if the array will be 1/2
full and pad the capacity against such behavior by calling an
additional O(1) push or pop to guard against it).   

Another possibility is to use a different size check instead of n/2
-> say n/4.     

The following analysis examines the assumptions of the problem, and
the breaks down the amortized analysis in more detail. 



ASSUMPTION 1:  The array only shrinks when pop() is called.  
  let n = 4 // cap = 4, size = 2
  push() // cap = 4, size = 3, cost = 1
  pop() // size = 2, cap = 4 - 2 = 2, cost = 1 push() + 2 pops, avg = 1.5
  push() // size = 3, cap = 4, cost = 

test1: alternate push() and pop() where initial capacity is 2
| op N | pre size | pre cap | type | post size | post cap | size <= cap/2 | cost | sum |       avg | n^2 |
|------+----------+---------+------+-----------+----------+---------------+------+-----+-----------+-----|
|    1 |        1 |       2 | push |         2 |        2 |             0 |    1 |   1 |         1 |   1 |
|    2 |        2 |       2 | pop  |         1 |        2 |             1 |    2 |   3 |       1.5 |   4 |
|    3 |        1 |       2 | push |         2 |        2 |             0 |    1 |   4 | 1.3333333 |   9 |
|    4 |        2 |       2 | pop  |         1 |        2 |             1 |    2 |   6 |       1.5 |  16 |
|      |          |         |      |           |          |               |      |     |       0/0 |  25 |
#+TBLFM: $10=$9/$1

This isn't O(N^2).  
  
  
test2: alternate pop() and push() where initial capacity is 2
| op N | pre size | pre cap | type | post | post | size <= | push |  pop | sum | avg | n^2 |   |
|      |          |         |      | size |  cap | cap/2   | cost | cost |     |     |     |   |
|------+----------+---------+------+------+------+---------+------+------+-----+-----+-----+---|
|    1 |        1 |       2 | pop  |    0 |    2 | y       |    0 |    1 |   1 |   1 |   1 |   |
|    2 |        0 |       1 | push |    1 |    1 | n       |    1 |    0 |   2 |   1 |   4 |   |
|    3 |        1 |       1 | pop  |    0 |    1 | y       |    0 |    1 |   3 |   1 |   9 |   |
|    4 |        0 |       1 | push |    1 |    1 | n       |    1 |    0 |   4 |   1 |  16 |   |
#+TBLFM: $11=$10/$1

This isn't O(N^2)


test3: alternate pop() and push() where initial capacity is large, say 100
| op N | pre size | pre cap | type | post | post | size <= | push |  pop | sum | avg | n^2 |   |
|      |          |         |      | size |  cap | cap/2   | cost | cost |     |     |     |   |
|------+----------+---------+------+------+------+---------+------+------+-----+-----+-----+---|
|    1 |       50 |     100 | pop  |   49 |   50 | y       |    0 | 50+1 |  51 |  51 |   1 |   |
|    2 |       49 |      50 | push |   50 |  100 | y       | 50+1 |    0 | 102 |  51 |   4 |   |
|    3 |       50 |     100 | pop  |   49 |   50 | y       |    0 | 50+1 | 153 |  51 |   9 |   |
|    4 |       49 |      50 | push |   50 |  100 | y       | 50+1 |    0 | 204 |  51 |  16 |   |
#+TBLFM: $11=$10/$1

This is O(51), but it's also O(N^2) when N is much less than 51.  




ASSUMPTION 2: Everytime a push() is called, the capacity is checked.
if (size < 0.5 capacity)  
 for (0.5 capacity times) 
   pop()


I couldn't find a way to show that this interpretation ever reaches O(n^2).

The array doubles its capacity when full, and shrinks by 1/2 when
it's 1/2 full or less.  This could mean that it only shrinks when a
pop is called, or it could mean that it pops 1/2 of the capacity off
whenver an element is added and the array is less than 1/2 full.
Assuming that a pop() call takes up one cost unit, then it will be
O(N^2) every time an element is added and the capacity is less than
1/2 full.  That is:  

Let's say N=8, and N/2 = 4.

|-------------+----------+--------+----------------+--------------+-----------+-----|
| (N) push op | capacity | <= 1/2 | op cost        | sum of costs |  avg cost | N^2 |
|-------------+----------+--------+----------------+--------------+-----------+-----|
|           1 |        4 | y      | 1 push, 2 pops |            3 |         3 |   1 |
|           2 |        2 | n      | 1 push         |            4 |         2 |   4 |
|           3 |        4 | n      | 1 push         |            5 | 1.6666667 |   9 |
|           4 |        4 | n      | 1 push         |            6 |       1.5 |  16 |
|           5 |        8 | n      | 1 push         |            7 |       1.4 |  25 |
|           6 |        8 | n      | 1 push         |            8 | 1.3333333 |  36 |
|           7 |        8 | n      | 1 push         |            9 | 1.2857143 |  49 |
|           8 |        8 | n      | 1 push         |           10 |      1.25 |  64 |
|           9 |       16 | n      | 8+1 push       |           11 | 1.2222222 |  81 |
|          10 |       16 | n      | 1 push         |           12 |       1.2 | 100 |
|          11 |       16 | n      | 1 push         |           13 | 1.1818182 | 121 |
|          12 |       16 | n      | 1 push         |           14 | 1.1666667 | 144 |
|          13 |       16 | n      | 1 push         |           15 | 1.1538462 |     |
|          14 |       16 | n      | 1 push         |           16 | 1.1428571 |     |
|          15 |       16 | n      | 1 push         |           17 | 1.1333333 |     |
|          16 |       16 | n      | 1 push         |           18 |     1.125 |     |
|          17 |       32 | n      | 1 push         |           19 | 1.1176471 |     |
#+TBLFM:$6=$5/$1


Let's say N=6, and N/2 = 3.

|-------------+----------+--------+---------------+--------------+-----------+-----|
| (N) push op | capacity | <= 1/2 | op cost       | sum of costs |  avg cost | N^2 |
|-------------+----------+--------+---------------+--------------+-----------+-----|
|           1 |        3 | y      | 1 push, 2 pop |            3 |         3 |   1 |
|           2 |        4 | y      | 2 push, 2 pop |            7 |       3.5 |   4 |
|           3 |        4 | n      | 1 push        |            8 | 2.6666667 |   9 |
|           4 |        4 | n      | 1 push        |            6 |       1.5 |  16 |
|           5 |        8 | n      | 1 push        |            7 |       1.4 |  25 |
|           6 |        8 | n      | 1 push        |            8 | 1.3333333 |  36 |
|           7 |        8 | n      | 1 push        |            9 | 1.2857143 |  49 |
#+TBLFM:$6=$5/$1;

Let's say N=4, and N/2 = 2.

|-------------+----------+--------+---------------+--------------+-----------+-----|
| (N) push op | capacity | <= 1/2 | op cost       | sum of costs |  avg cost | N^2 |
|-------------+----------+--------+---------------+--------------+-----------+-----|
|           1 |        2 | y      | 1 push, 1 pop |            2 |         2 |   1 |
|           2 |        2 | n      | 2 push        |            4 |         2 |   4 |
|           3 |        4 | n      | 1 push        |            5 | 1.6666667 |   9 |
|           4 |        4 | n      | 1 push        |            6 |       1.5 |  16 |
|           5 |        8 | n      | 1 push        |            7 |       1.4 |  25 |
|           6 |        8 | n      | 1 push        |            8 | 1.3333333 |  36 |
|           7 |        8 | n      | 1 push        |            9 | 1.2857143 |  49 |
#+TBLFM:$6=$5/$1;

