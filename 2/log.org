** log for folder 2
*** summary

    Off the top of my head: 

    There are 3 ways to build this.  

    1. Using object code and direct compilation.
    2. Using static libs and linking
    3. Using shared libs and dynamic linking
      
    All three have pros and cons.   The goal is currently to produce
    all 3 builds and compare the pros and cons of each method.  

    Here are my immediate thoughts:

    1. direct compilation
       - easiest to build
    2. static libs
       - fastest run time
       - largest file size
       - easily portable executables
    3. shared libs
       - easy to use with other builds


*** Sat Aug 29, 2015 14:17:19 having a folder named 2 is stupid.

    What I need to do here is use what's here to make something useful.  

    There are 2 useful things here.  A calculator is useful, but it's
    not as useful as the dynamic array which could be made into a
    library that can be built on.  

    So what I want to do is build dynamicArray.c into dynamicArray.so
    with gcc in the makefile.  Then build testDynArray.c and calc.c
    by linking to the .so file.  


    # add instructions and links to building shared / static libraries
    # with gcc here. 

    http://www.adp-gmbh.ch/cpp/gcc/create_lib.html
    
    Static libs are created with ar.

    Shared libs are created with 
    
    gcc -c -fPIC
    gcc -shared -Wl, -soname,

*** Sat Aug 29, 2015 14:25:46 benchmarking

    Eventually, I'm going to want to benchmark this stuff.  Where do I
    have benchmarking routines?

*** Mon Aug 31, 2015 07:33:14 not getting hung up
    
    Don't want to get too hung up on details, because there's a lot of
    other things to get to here, folder 2 is just the start.

    Still trying to analyze shared and static libraries as well as
    object code.  What's the big difference?   This is really all
    about implementation which fascinates me, but the project is more
    about abstraction than implementation.   So the key is not to get
    too hung up on implementation details.  

    If I wanted to thoroughly analyze things, then looking at them in
    hex mode is probably a good way.   I'll come back to that on a
    different pass, right now I just want to build the static and
    shared libraries.  

    I wanted to make the next folder build off the library in this
    folder.  Mostly to get a better grip on larger scale projects
    using gnu-make.    

    I'm fairly certain that I'm not going to be able to make this code
    base shippable by tomorrow.  

*** Mon Aug 31, 2015 07:38:38 looking ahead [[file:/n900t/usr/src/mlib/3/]]
*** Mon Aug 31, 2015 09:01:45 build notes
**** cygwin doesn't work out of box
     This works on ubuntu, but not on cygwin. 

     http://stackoverflow.com/questions/16154130/cygwin-g-linker-doesnt-find-shared-library

**** files and sizes
    total 1.9M
868K -rwxr-xr-x 1 root root 867K Aug 31 09:16 testda-static
 16K -rw-r--r-- 1 root root  15K Aug 31 09:16 dynamicArray.o
 16K -rw-r--r-- 1 root root  16K Aug 31 09:16 libDynArr.a
 20K -rwxr-xr-x 1 root root  17K Aug 31 09:16 libDynArr.so
4.0K -rwxr--r-- 1 root root 1.3K Aug 31 09:16 Makefile
868K -rwxr-xr-x 1 root root 867K Aug 31 09:15 a.out
 28K -rwxr-xr-x 1 root root  26K Aug 31 09:15 calc
 16K -rwxr-xr-x 1 root root  15K Aug 31 09:15 testda-shared
 20K -rw-r--r-- 1 root root  17K Aug 31 09:14 calc.o
 12K -rw-r--r-- 1 root root  11K Aug 31 09:14 testDynArray.o
4.0K -rwxr--r-- 1 root root 2.2K Aug 31 09:09 log.org
 16K -rwxr--r-- 1 root root  15K Aug 31 08:58 2015-08-31-log.org
4.0K -rwxr--r-- 1 root root  549 Aug 29 14:16 Makefile~
 16K -rwxr--r-- 1 root root  16K Aug 29 14:14 amortizedAnalysis.txt
8.0K -rwxr--r-- 1 root root 7.7K Aug 29 14:14 calc.c
8.0K -rwxr--r-- 1 root root 7.7K Aug 29 14:14 dynamicArray.c
4.0K -rwxr--r-- 1 root root  892 Aug 29 14:14 dynamicArray.h
4.0K -rwxr--r-- 1 root root 3.0K Aug 29 14:14 testDynArray.c

**** can't run testda-shared without some manipulation

# ./testda-shared 
./testda-shared: error while loading shared libraries: libDynArr.so: cannot open shared object file: No such file or directory
*** Mon Aug 31, 2015 09:31:20 for future [0/2]
    
    - [ ] build [[file:/n900t/usr/src/mlib/3/]] off of 2
      - this is a major goal really
      - means putting dynArr into its own folder
      - can just copy for now and remove later

    - [ ] break calc out into its own project
      - useful for eventually building a lisp interpreter
      - also useful for computer algebra
      - might be useful for graphics.  See gimp and gsumi projects.
        Maybe these will make more sense after considering this project.
